The problem with this stack is a memory leak in the pop method.  It could be fixed by "nulling" out the freed object reference once it is popped.  The nature of a stack is that it grows and shrinks during normal operation.  In this implementation objects that were popped off the stack will not be garbage collected. This is because the stack maintains a reference to the object that will never be dereferenced. Object references outside the the array of elements whose index is less than size will not be collected.  The way I tested this was by creating a large loop of over 15,000 integers and pushing and popping the integers onto the stack.   I then observed the behavior using a VM profiler.  